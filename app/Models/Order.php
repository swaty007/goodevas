<?php

/** Auto-generated by Craftable PRO */

namespace App\Models;

use App\Helpers\TimeParser;
use App\Models\Traits\HasDateScopes;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Illuminate\Pagination\Paginator;
use Psr\Container\ContainerExceptionInterface;
use Psr\Container\NotFoundExceptionInterface;
use Spatie\Activitylog\LogOptions;
use Spatie\Activitylog\Traits\LogsActivity;

class Order extends Model
{
    use HasDateScopes;
    use LogsActivity;

    protected $table = 'orders';

    protected $fillable = [
        'api_key_id',
        'order_id',
        'type',
        'order_date',
        'update_date',
        'order_status',
        'fulfillment',
        'sales_channel',
        'total_amount',
        'total_currency',
        'payment_method',
        'buyer_name',
        'address_line_1',
        'address_line_2',
        'city',
        'state',
        'postal_code',
        'country_code',
        'expected_ship_date',
        'is_shipped',
        'original_object',
    ];

    protected $casts = [
        'order_date' => 'datetime',
        'update_date' => 'datetime',
        'expected_ship_date' => 'datetime',
    ];

    public function items(): HasMany
    {
        return $this->hasMany(OrderItem::class);
    }

    public function apiKey(): BelongsTo
    {
        return $this->belongsTo(ApiKey::class);
    }

    public function itemsByApiKey(): HasMany
    {
        return $this->hasMany(OrderItem::class, 'api_order_id', 'order_id');
    }

    public function getActivitylogOptions(): LogOptions
    {
        return LogOptions::defaults()
            ->logOnly([
                'api_key_id',
                'order_id',
                'type',
                'order_date',
                'update_date',
                'order_status',
                'fulfillment',
                'sales_channel',
                'payment_method',
                'expected_ship_date',
                'is_shipped',
            ])
            ->logOnlyDirty()
            ->dontSubmitEmptyLogs();
    }
}
